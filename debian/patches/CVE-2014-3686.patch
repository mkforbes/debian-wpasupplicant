Index: wpasupplicant-0.6.10/src/utils/os.h
===================================================================
--- wpasupplicant-0.6.10.orig/src/utils/os.h	2014-11-18 17:55:27.540335794 +0100
+++ wpasupplicant-0.6.10/src/utils/os.h	2014-11-18 17:55:35.936306712 +0100
@@ -468,6 +468,15 @@
  */
 size_t os_strlcpy(char *dest, const char *src, size_t siz);
 
+/**
+ * os_exec - Execute an external program
+ * @program: Path to the program
+ * @arg: Command line argument string
+ * @wait_completion: Whether to wait until the program execution completes
+ * Returns: 0 on success, -1 on error
+ */
+int os_exec(const char *program, const char *arg, int wait_completion);
+
 
 #ifdef OS_REJECT_C_LIB_FUNCTIONS
 #define malloc OS_DO_NOT_USE_malloc
Index: wpasupplicant-0.6.10/src/utils/os_unix.c
===================================================================
--- wpasupplicant-0.6.10.orig/src/utils/os_unix.c	2014-11-18 17:55:27.540335794 +0100
+++ wpasupplicant-0.6.10/src/utils/os_unix.c	2014-11-18 17:55:35.936306712 +0100
@@ -14,6 +14,8 @@
 
 #include "includes.h"
 
+#include <sys/wait.h>
+
 #include "os.h"
 
 void os_sleep(os_time_t sec, os_time_t usec)
@@ -297,3 +299,57 @@
 
 	return s - src - 1;
 }
+
+
+int os_exec(const char *program, const char *arg, int wait_completion)
+{
+   pid_t pid;
+   int pid_status;
+
+   pid = fork();
+   if (pid < 0) {
+	perror("fork");
+	return -1;
+   }
+
+   if (pid == 0) {
+	/* run the external command in the child process */
+	const int MAX_ARG = 30;
+	char *_program, *_arg, *pos;
+	char *argv[MAX_ARG + 1];
+	int i;
+
+	_program = os_strdup(program);
+	_arg = os_strdup(arg);
+
+	argv[0] = _program;
+
+	i = 1;
+	pos = _arg;
+	while (i < MAX_ARG && pos && *pos) {
+	    while (*pos == ' ')
+		pos++;
+	    if (*pos == '\0')
+		break;
+	    argv[i++] = pos;
+	    pos = os_strchr(pos, ' ');
+	    if (pos)
+		*pos++ = '\0';
+	}
+	argv[i] = NULL;
+
+	execv(program, argv);
+	perror("execv");
+	os_free(_program);
+	os_free(_arg);
+	exit(0);
+	return -1;
+   }
+
+   if (wait_completion) {
+	/* wait for the child process to complete in the parent */
+	waitpid(pid, &pid_status, 0);
+   }
+
+   return 0;
+}
Index: wpasupplicant-0.6.10/src/utils/os_win32.c
===================================================================
--- wpasupplicant-0.6.10.orig/src/utils/os_win32.c	2014-11-18 17:55:27.540335794 +0100
+++ wpasupplicant-0.6.10/src/utils/os_win32.c	2014-11-18 17:55:35.936306712 +0100
@@ -220,3 +220,9 @@
 
 	return s - src - 1;
 }
+
+
+int os_exec(const char *program, const char *arg, int wait_completion)
+{
+   return -1;
+}
Index: wpasupplicant-0.6.10/wpa_supplicant/wpa_cli.c
===================================================================
--- wpasupplicant-0.6.10.orig/wpa_supplicant/wpa_cli.c	2014-11-18 17:55:27.540335794 +0100
+++ wpasupplicant-0.6.10/wpa_supplicant/wpa_cli.c	2014-11-18 17:56:54.656033843 +0100
@@ -1349,28 +1349,20 @@
 static int wpa_cli_exec(const char *program, const char *arg1,
 			const char *arg2)
 {
-	char *cmd;
+	char *arg;
 	size_t len;
 	int res;
-	int ret = 0;
 
-	len = os_strlen(program) + os_strlen(arg1) + os_strlen(arg2) + 3;
-	cmd = os_malloc(len);
-	if (cmd == NULL)
+	len = os_strlen(arg1) + os_strlen(arg2) + 2;
+	arg = os_malloc(len);
+	if (arg == NULL)
 		return -1;
-	res = os_snprintf(cmd, len, "%s %s %s", program, arg1, arg2);
-	if (res < 0 || (size_t) res >= len) {
-		os_free(cmd);
-		return -1;
-	}
-	cmd[len - 1] = '\0';
-#ifndef _WIN32_WCE
-	if (system(cmd) < 0)
-		ret = -1;
-#endif /* _WIN32_WCE */
-	os_free(cmd);
+	printf("moo: execing\n");
+	os_snprintf(arg, len, "%s %s", arg1, arg2);
+	res = os_exec(program, arg, 1);
+	os_free(arg);
 
-	return ret;
+	return res;
 }
 
 
